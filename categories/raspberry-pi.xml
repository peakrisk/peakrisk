<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Peak Risk (raspberry pi)</title><link>http://peakrisk.github.io/peakrisk/</link><description></description><atom:link rel="self" href="http://peakrisk.github.io/peakrisk/categories/raspberry-pi.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 19 Jun 2015 19:07:10 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Teaching with pi's</title><link>http://peakrisk.github.io/peakrisk/posts/teaching-with-pis.html</link><dc:creator>John Gill</dc:creator><description>&lt;div&gt;&lt;p&gt;This week I spent two half days trying to teach about free software
with raspberry pi's.&lt;/p&gt;
&lt;p&gt;The students were all local, in full time further education in IT
fields and hoping to have a career in IT.&lt;/p&gt;
&lt;p&gt;There were 4 students, a mixed group.  Fortunately for me, a previous
graduate of this summer programme came along to help out.&lt;/p&gt;
&lt;div class="section" id="day-1"&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;p&gt;The first session was a lesson in the problems of working with tech in
education.  I had made a visit to the room for the training the
previous week.&lt;/p&gt;
&lt;p&gt;I was supplying raspberry pi's and SD cards, but we needed monitors,
keyboards, mice, HDMI cables and wired network connections.&lt;/p&gt;
&lt;p&gt;Now we were only able to find monitors with DVI ports, not HDMI and
only two monitors.  Fortunately, I had DVI to HDMI adaptors and we
managed to cobble together the remaining bits and pieces.&lt;/p&gt;
&lt;p&gt;I'll skip the problems we had connecting to the network and perhaps
cover that in a future post on security and other matters.&lt;/p&gt;
&lt;p&gt;Free software was mostly new to the students.  Where to begin.  I
wanted to show them linux, but through the command line.  I wanted
them to start to develop a better understanding of how a computer
actually works, one of the goals the raspberry pi project shares.&lt;/p&gt;
&lt;p&gt;My helper was fantastic.  Since there were two pi workstations set up,
he worked with one pair of students and me with the other.&lt;/p&gt;
&lt;p&gt;One goal on the first day was to introduce the students to version
control using &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt; on the command line.&lt;/p&gt;
&lt;p&gt;Now we soon hit the editor problem.  There is always the dilemma
between showing powerful tools with a steep learning curve and simple,
quick to learn tools in this sort of training.&lt;/p&gt;
&lt;p&gt;I wanted to give the students a glimpse of &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, in part because
it is a classic free software tool.&lt;/p&gt;
&lt;p&gt;I first encountered emacs around 1985 when attending an &lt;em&gt;Introduction
to Unix&lt;/em&gt; course at a local technology college in the UK.  The course
was a couple of days and they taught us some simple C-shell and an
introduction to Unix systems.&lt;/p&gt;
&lt;p&gt;Since an editor was needed for the examples, they showed us &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;.
I recall writing a review to the effect that whilst emacs seemed to be
super powerful, it took a disproportionate amount of the time for the
course.&lt;/p&gt;
&lt;p&gt;My next experience with emacs was around 1989.  My workplace had
acquired shiny new Sun workstations.  Running Unix.  So the first
thing I needed was an editor.  A colleague explained there were two
practical choices: emacs and vi.  Emacs had a vi mode, so basically
that sealed it.  Emacs it was.&lt;/p&gt;
&lt;p&gt;This time I was going to be using it to write code.  An investment of
a few hours learning how to use it well seemed worthwhile, so I read
the tutorial.  Soon I was hooked.  This thing was so much more
powerful than anything I had used before.&lt;/p&gt;
&lt;p&gt;I am still using emacs, some 25 years later.  I've used it to edit
code in fortran, C, perl, tcl, python, lisp and who knows what else.
I've played tetris, read email, browsed newsgroups, read twitter, run
ipython notebooks, used git, read man pages and who knows what else.&lt;/p&gt;
&lt;p&gt;For the training though, I probably should have just pointed the
students at this raspberry pi page on &lt;a class="reference external" href="https://www.raspberrypi.org/documentation/linux/usage/text-editors.md"&gt;editors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the end of the first session the students had created a git
repository and were able to make changes to files, state the changes
and commit them to the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-2"&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p&gt;I had a bit of a re-think after the first session.  We decided to
bring in some more equiment to give us more options in the room.&lt;/p&gt;
&lt;p&gt;The students are on a 3 month programme, involving internships in
local firms, with 1 week per month in training.&lt;/p&gt;
&lt;p&gt;They also have to do some sort of project for the course.  One idea
they are considering is to create a website which provides information
on the public transport on the island.&lt;/p&gt;
&lt;p&gt;I decided to structure the afternoon around how they might go about
this if they wanted to run it as a free software project.&lt;/p&gt;
&lt;p&gt;This gave an opportunity to introduce the students to &lt;a class="reference external" href="https://github.com"&gt;github&lt;/a&gt; and
build on the introduction to git that we had started in the previous
session.&lt;/p&gt;
&lt;p&gt;The bus application is challenging here in Bermuda as much of the data
needed for the application does not appear to be available in machine
readable form.&lt;/p&gt;
&lt;p&gt;For most free software bus applications having your schedule and route
data in the &lt;a class="reference external" href="https://developers.google.com/transit/gtfs/reference"&gt;General Transit Feed Specification&lt;/a&gt; allows you to take
advantage of a lot of work done in other jurisdictions.&lt;/p&gt;
&lt;p&gt;The good news for Bermuda is that its bus and ferry network is small,
so even if this data has to be entered by hand it should not take too
long.  Further, the students could always concentrate on one or two
key routes while the iron out the glitches.&lt;/p&gt;
&lt;p&gt;I had hoped to introduce a little python programming, but this will
have to come in later sessions.&lt;/p&gt;
&lt;p&gt;In the meanwhile, this &lt;a class="reference external" href="https://www.youtube.com/watch?v=4EOZvow1mk4"&gt;advanced git&lt;/a&gt; talk from this year's PyCon may
be helpful to get a better understanding of how git actually works and
introduce some more advanced concepts.&lt;/p&gt;
&lt;p&gt;The PyCon videos are all in the &lt;em&gt;PyCon 2015&lt;/em&gt; channel on youtube.  I
also recommend Jacob Kaplan-Moss's &lt;a class="reference external" href="https://www.youtube.com/watch?v=hIJdFxYlEKE"&gt;keynote&lt;/a&gt; to anyone unsure about
whether they have the skills to be a programmer.&lt;/p&gt;
&lt;p&gt;I am looking forward to being involved with these students over the
summer.  Hopefully, they are about to start doing some great things
with free software.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>free software</category><category>git</category><category>python</category><category>raspberry pi</category><guid>http://peakrisk.github.io/peakrisk/posts/teaching-with-pis.html</guid><pubDate>Fri, 19 Jun 2015 18:14:24 GMT</pubDate></item><item><title>More raspberry pi</title><link>http://peakrisk.github.io/peakrisk/posts/more-raspberry-pi.html</link><dc:creator>John Gill</dc:creator><description>&lt;div&gt;&lt;p&gt;I am going to be doing an introduction to free software and linux for
this year's &lt;a class="reference external" href="http://tlf.bm/"&gt;Technology Leadership Forum&lt;/a&gt; students.&lt;/p&gt;
&lt;p&gt;The plan is to have the students use raspberry pi's to learn about the
linux platform.&lt;/p&gt;
&lt;p&gt;I have a bunch of the new raspberry pi 2's and have been experimenting
with different linux distributions on these pi's.&lt;/p&gt;
&lt;p&gt;I was going to write up my experiences, but Swapnil Bhartiya has
kindly &lt;a class="reference external" href="http://www.linux.com/learn/tutorials/818062-getting-started-with-raspberry-pi-2-install-arch-linux"&gt;blogged&lt;/a&gt; about his own experiences with Arch, Raspbian and
Ubuntu Snappy Core.  His conclusions were similar to my own.&lt;/p&gt;
&lt;div class="section" id="arch"&gt;
&lt;h2&gt;Arch&lt;/h2&gt;
&lt;p&gt;I have been using &lt;a class="reference external" href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; a little of late and like many things
about Arch and &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;The Arch Way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, the Arch wiki has excellent documentation.  This is
critical to its success, since it does many things a little
differently to the larger linux distributions.&lt;/p&gt;
&lt;p&gt;An initial Arch install will not install much beyond the bare
essentials to get you up and running.  This does mean it can take a
little while to get a new system just how you want it, but has the
advantage you do not end up with hundreds of packages installed which
you have little idea what they do.  For the security conscious this is
a definite plus.&lt;/p&gt;
&lt;p&gt;One feature I love is that their are no &lt;em&gt;dev&lt;/em&gt; packages.  Anyone who
has tried using any of the main linux distributions and is in the
habit of compiling code on those systems will have run into the
situation where code fails to build due to missing C header files.&lt;/p&gt;
&lt;p&gt;In the major distributions these header files are in separate &lt;em&gt;dev&lt;/em&gt;
packages.  The philosophy is that most people are not compiling code
on these machines so do not need the header files.  This choice is
fine until a new user decides to try compiling some code and then is
hit by the missing header file issue.  Just another obstacle put in
the way of potential new developers.&lt;/p&gt;
&lt;p&gt;In contrast, Arch argues that these header files are generally tiny
and including them in the main package adds little overhead and saves
a lot of time for anyone doing development.   It would be good if more
distros made this switch.&lt;/p&gt;
&lt;p&gt;Using Arch will present some challenges to a new user, but given the
excellent state of the documentation it is also an excellent way to
gain a thorough understanding of how everything works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbian"&gt;
&lt;h2&gt;Raspbian&lt;/h2&gt;
&lt;p&gt;Raspbian appears to be the most widely used distribution on the
raspberry pi.   It is based on the Debian and has over 35,000 packages
available.&lt;/p&gt;
&lt;p&gt;Since I have mostly used Debian based distributions this seems a good
place to start.&lt;/p&gt;
&lt;p&gt;Trying different distros can get a little time consuming, between
downloading images and copying them onto SD cards.  Further, different
images are needed for the older pi's and the pi 2.&lt;/p&gt;
&lt;p&gt;The simplest way to get a Raspian system up and running is to
&lt;a class="reference external" href="https://www.raspberrypi.org/downloads/"&gt;download&lt;/a&gt; the raspian image from raspberrypi.org.&lt;/p&gt;
&lt;p&gt;To install just copy to the SD card device using dd:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dd if=raspian_image_you_downloaded.img of=/dev/SDCARD
&lt;/pre&gt;
&lt;p&gt;Finding the device for your SD card can be tricky. &lt;em&gt;lsblk&lt;/em&gt; shows you
all the block devices and with luck your SD card will be there.&lt;/p&gt;
&lt;p&gt;On my Ubuntu system it is /dev/mmblk0, on an Arch machine it showed up
as /dev/sdb.  You can usually figure things out using the SIZE of the
device.&lt;/p&gt;
&lt;p&gt;Note also that you want the block with TYPE disk, not any of the
partitions it might have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbain-installer"&gt;
&lt;h2&gt;Raspbain installer&lt;/h2&gt;
&lt;p&gt;Another approach is to use this &lt;a class="reference external" href="https://github.com/debian-pi/raspbian-ua-netinst"&gt;Raspbian installer&lt;/a&gt;.   One clear
advantage is that it is a small download, a mere 11MB and a small copy
onto your SD card.&lt;/p&gt;
&lt;p&gt;You then just plug it into the pi, turn on the pi with a wired network
connection and the install happens by magic.  It takes 20 minutes or
so, with a reasonable internet connection.&lt;/p&gt;
&lt;p&gt;Other advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you use the same installer for the original pi's and the pi 2.&lt;/li&gt;
&lt;li&gt;the installer installs the latest packages from the release
(currently wheezy) that you choose.&lt;/li&gt;
&lt;li&gt;you can customise the installer to include additional packages and a
number of other customisations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The down side is that the base install comes without a GUI
environment.  Depending on what you intend to do with the pi this may
not be a problem.&lt;/p&gt;
&lt;p&gt;I am going to experiment with customising the installer to see if I
can get it to install lxde, emacs, git and some other goodies I like
to have around on my systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;I cloned the git repository for the rasbian net installer:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone git@github.com:debian-pi/raspbian-ua-netinst.git
&lt;/pre&gt;
&lt;p&gt;I then added an &lt;em&gt;installer-config.txt&lt;/em&gt; to specify some extra packages
to install.&lt;/p&gt;
&lt;p&gt;I then followed the instructions in &lt;em&gt;BUILD.md&lt;/em&gt; to rebuild the image
and installed from there.&lt;/p&gt;
&lt;p&gt;This did not go as well as I had hoped, since although the extra
packages got installed their dependencies did not, at least that is
what I think happened.&lt;/p&gt;
&lt;p&gt;It also took me a couple of goes, &lt;em&gt;installer-config.txt&lt;/em&gt; needs to be
given execute permission, eg:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
chmod 77f installer-config.txt
&lt;/pre&gt;
&lt;p&gt;to make this work.&lt;/p&gt;
&lt;p&gt;I decided to try using &lt;em&gt;post-install.txt&lt;/em&gt; instead.  By the time this
runs the install is pretty much complete.&lt;/p&gt;
&lt;p&gt;My first attempt with this was just to add the following apt-get call:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install -y git emacs aptitude xserver-xorg-video-fbdev lxde curl htop nmap
&lt;/pre&gt;
&lt;p&gt;But this failed to do anything.  Time to track down the actuall
install script and see how what is going on.&lt;/p&gt;
&lt;p&gt;The actual install script is in &lt;em&gt;scripts/etc/init.d/rcS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now I understand.  The installer basically boots a minimal linux
kernel and then uses a single &lt;em&gt;init&lt;/em&gt; script, run during the boot to do
the install.&lt;/p&gt;
&lt;p&gt;Reading that script it becomes clear what I need to do.  The new
operating system is actually mounted on /rootfs and I need to use the
&lt;em&gt;chroot&lt;/em&gt; command to make sure apt-get runs with that as the root
filesystem.   So I ended up with &lt;em&gt;post-install.txt&lt;/em&gt; looking like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/bash

# install some extra goodies.  Do it here rather than in packages to
# pull in dependencies

chroot /rootfs /usr/bin/apt-get install -y \
   git emacs aptitude xserver-xorg-video-fbdev lxde curl htop nmap
&lt;/pre&gt;
&lt;p&gt;Bingo! It works, modulo having to hit enter three times to say OK to
some dialogs that the &lt;em&gt;lxde&lt;/em&gt; desktop environment displays.&lt;/p&gt;
&lt;p&gt;One other trick I used in all this was mounting the SD card's first
partition after copying the installer onto it.  This allows me to copy
over a new &lt;em&gt;installer-config.txt&lt;/em&gt; or &lt;em&gt;post-install.txt&lt;/em&gt; without having
to rebuild the full image.&lt;/p&gt;
&lt;p&gt;Overall, I am liking this installer.&lt;/p&gt;
&lt;!-- title: links --&gt;
&lt;!-- slug: references --&gt;
&lt;!-- date: 2015-06-10 14:08:31 UTC --&gt;
&lt;!-- tags: draft --&gt;
&lt;!-- link: --&gt;
&lt;!-- description: links to include in all posts --&gt;
&lt;!-- type: text --&gt;
&lt;!-- Generated with: grep -h '^\.\. _' *.rst | sort | uniq &gt; references.rst --&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry pi</category><guid>http://peakrisk.github.io/peakrisk/posts/more-raspberry-pi.html</guid><pubDate>Wed, 10 Jun 2015 18:38:29 GMT</pubDate></item></channel></rss>