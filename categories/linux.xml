<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Peak Risk (linux)</title><link>http://peakrisk.github.io/peakrisk/</link><description></description><atom:link rel="self" href="http://peakrisk.github.io/peakrisk/categories/linux.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 27 Jul 2015 19:19:16 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Free Software and Computer Security</title><link>http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html</link><dc:creator>John Gill</dc:creator><description>&lt;div&gt;&lt;p&gt;I have been thinking much about information security over the last few
months.&lt;/p&gt;
&lt;p&gt;Over the years I have thought about the relative merits of &lt;cite&gt;free
software&lt;/cite&gt; versus non-free.&lt;/p&gt;
&lt;p&gt;Free as in freedom, or logicel libre if you prefer.  Free software
comes with important freedoms.  You are free to examine how it works,
make changes and experiment.&lt;/p&gt;
&lt;p&gt;Free software is everywhere, for example, &lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id1"&gt;&lt;span class="problematic" id="id2"&gt;`openssl`_&lt;/span&gt;&lt;/a&gt; is used in many
different operating systems.&lt;/p&gt;
&lt;div class="section" id="your-security-depends-on-free-software"&gt;
&lt;h2&gt;Your security depends on free software&lt;/h2&gt;
&lt;p&gt;Even when you are using non-free, you are almost surely using lots of
free software at the same time.  Depending on how that software is
licensed you might be able to find just which software is used.&lt;/p&gt;
&lt;p&gt;I find one key differentiation in licenses is in the restrictions they
choose to put on the licensees.&lt;/p&gt;
&lt;p&gt;So the most permissive licenses tend to be along the lines of, "here
is some software, do what you like with it, don't sue me".&lt;/p&gt;
&lt;div class="section" id="other-common-clauses"&gt;
&lt;h3&gt;Other common clauses&lt;/h3&gt;
&lt;p&gt;Others might insist on attribution (for example if you modify it and
pass the resulting application onto somebody else) and have things to
say about trademarks etc.&lt;/p&gt;
&lt;p&gt;You can find broader discussion of licenses at the following links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;find some good license discussions&lt;/li&gt;
&lt;li&gt;more..&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gpl-v-non-gpl"&gt;
&lt;h2&gt;GPL v non-GPL&lt;/h2&gt;
&lt;p&gt;The key clause of the &lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id3"&gt;&lt;span class="problematic" id="id4"&gt;`General Public License`_&lt;/span&gt;&lt;/a&gt; is that it insists
that if you pass on the same rights you received to any that you
pass it onto.&lt;/p&gt;
&lt;p&gt;The idea is that recipients should have all they need to explore,
modify and experiment with the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="affect-of-the-gpl"&gt;
&lt;h2&gt;Affect of the GPL&lt;/h2&gt;
&lt;p&gt;Things are complicated.  On many levels the major effects apply
regardless of the license.&lt;/p&gt;
&lt;p&gt;The non-GPL have been adopted more readily by proprietary vendors, for
example &lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id5"&gt;&lt;span class="problematic" id="id6"&gt;`Apple's OS is derived from BSD Unix`_&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python has a BSD style license.  Python seems to like to make it avaiable to
anyone who is interested in the language.   It does say that if you
create a derivative work, that you need to include a brief summary of
the changes made to python.&lt;/p&gt;
&lt;p&gt;The license begins with some history of python, and some background on
&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id7"&gt;&lt;span class="problematic" id="id8"&gt;`Guido van Rossum`_&lt;/span&gt;&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;** CHECK THIS **&lt;/p&gt;
&lt;p&gt;The GPL has also been used as a way to encourage to license the
product under a more permissive license.  One notable example was
&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id9"&gt;&lt;span class="problematic" id="id10"&gt;`MySQL`_&lt;/span&gt;&lt;/a&gt; which was licensed uder the GPL but that enabled the company
doing the bulk of the deveolopment and driving the project to get
license income from those that appreciated the support.&lt;/p&gt;
&lt;p&gt;It allowed other businesses to build a business on top of MySQL, but
with their own custom adaptions.  Often these adaptions would
eventually end up in the project itself.  At some point it is better
to share the maintenance burden of a new feature.  Often that point is
now.&lt;/p&gt;
&lt;p&gt;Python makes itself accessible and hence it has become ubiquitous.&lt;/p&gt;
&lt;p&gt;The main effect of licenses is that the non-GPL software tends to be
more widely adopted by commercial organisations.  The main reason is
it allows them to produce derived works and not have to distribute
their own customisations and improvements.&lt;/p&gt;
&lt;p&gt;However, for smaller commercial organisations it is generally more
effective to work with the project itself and share their work.&lt;/p&gt;
&lt;p&gt;Keeping your fixes proprietary comes with costs as well as benefits.
A number of questions you need to ask are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Does this enhancement give me a significant competitive advantage?&lt;/li&gt;
&lt;li&gt;Why has nobody else done this already?&lt;/li&gt;
&lt;li&gt;Are people achieving the same result through some other feature or
product I do not know about?&lt;/li&gt;
&lt;li&gt;How long will it be before the project implements a feature like the
one we have build?&lt;/li&gt;
&lt;li&gt;Would we be better off sharing our feature and hence having more
control over the future development?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits-of-free-software"&gt;
&lt;h2&gt;Benefits of free software&lt;/h2&gt;
&lt;p&gt;provided tools others can use freely.&lt;/p&gt;
&lt;p&gt;supports free experimentation, gives a world of ideas which you can
explore with others&lt;/p&gt;
&lt;p&gt;created tools to help with collaborative working&lt;/p&gt;
&lt;p&gt;found ways to collaborate across the internet&lt;/p&gt;
&lt;p&gt;enabled local people to gain skills needed in their environment&lt;/p&gt;
&lt;p&gt;runs on old hardware&lt;/p&gt;
&lt;p&gt;it is a significant voice in the debate on information security and
privacy.  It will very likely play an important role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-benefits"&gt;
&lt;h2&gt;Security benefits&lt;/h2&gt;
&lt;div class="section" id="free-software"&gt;
&lt;h3&gt;Free software&lt;/h3&gt;
&lt;p&gt;Since people have access to the software and are free to experiment
and explore how it works they can look for potential security holes,
report the problems and perhaps fix them if they have the skills.&lt;/p&gt;
&lt;p&gt;Of course, the bad guys also have this advantage over non-free
software.&lt;/p&gt;
&lt;div class="section" id="sharing-your-work-openly"&gt;
&lt;h4&gt;Sharing your work openly&lt;/h4&gt;
&lt;p&gt;When you work with free software you are showing the world your code.
This takes a certain amount of courage.  Anyone who has taken part in
a code review knows that showing your code to others is baring your
soul.&lt;/p&gt;
&lt;p&gt;Most effective code shops have some form of code review in their
development process.  Two pairs of eyes are always good.  It helps
share knowledge, educate both parties and create better software.&lt;/p&gt;
&lt;p&gt;Once developers get comfortable with sharing with their peers, sharing
with the wider world becomes less daunting.&lt;/p&gt;
&lt;p&gt;Positive feedback can be very helpful here: you get an immediate
benefit for sharing.&lt;/p&gt;
&lt;p&gt;Many software engineers (and I include myself in this) are quite
insecure about their code.  Most programmers are &lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id11"&gt;&lt;span class="problematic" id="id12"&gt;`sort of average`_&lt;/span&gt;&lt;/a&gt;,
but knowledgeable enough to know that with more time and research
their code could be better.&lt;/p&gt;
&lt;p&gt;Regardless, code that is shared openly is likely going to be of a
&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id13"&gt;&lt;span class="problematic" id="id14"&gt;`higher quality`_&lt;/span&gt;&lt;/a&gt; by depending on the metric you choose to use to
measure quality.  The authors of the code will likely care about their
reputation in the free software community and hence take care to share
quality work, or at least identify the code as a quick hack or
whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="potential-sources-of-vulnerabilities-in-free-software"&gt;
&lt;h3&gt;Potential sources of vulnerabilities in free software&lt;/h3&gt;
&lt;div class="section" id="simple-bugs"&gt;
&lt;h4&gt;Simple bugs&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="malicious-contributions"&gt;
&lt;h4&gt;Malicious contributions&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="compromise-of-repository"&gt;
&lt;h4&gt;Compromise of repository&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="non-free-software"&gt;
&lt;h3&gt;Non-free software&lt;/h3&gt;
&lt;p&gt;With non-free software you are working with a black box.  You get to
choose inputs and observe outputs.  If you are lucky you can learn
about how the code works, but it is much harder than&lt;/p&gt;
&lt;div class="section" id="reverse-engineering"&gt;
&lt;h4&gt;Reverse engineering&lt;/h4&gt;
&lt;p&gt;If you have an executable there are tools that will allow you to take
the binary code and create human readable assembly code.  This is
generally missing comments and variable names.  It is a low level
description of the code, closer to the final op codes that a computer
runs.&lt;/p&gt;
&lt;p&gt;However, for those with skill and experience, reverse engineering is a
powerful technique.&lt;/p&gt;
&lt;p&gt;Sometimes the license will explicitly say you must not reverse
engineer the code.  Of course, bad guys will not necessarily obey the
license.&lt;/p&gt;
&lt;p&gt;However, security researchers will often decide not to break the
license.  The result is that only the bad guys are looking closely at
the code for vulnerabilities.&lt;/p&gt;
&lt;p&gt;This is not a place you want to be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="system-messages section"&gt;
&lt;h2&gt;Docutils System Messages&lt;/h2&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 11); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "openssl".&lt;/div&gt;
&lt;div class="system-message" id="id3"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 42); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "general public license".&lt;/div&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 55); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "apple's os is derived from bsd unix".&lt;/div&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 63); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "guido van rossum".&lt;/div&gt;
&lt;div class="system-message" id="id9"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 68); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "mysql".&lt;/div&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 159); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "sort of average".&lt;/div&gt;
&lt;div class="system-message" id="id13"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 164); &lt;em&gt;&lt;a href="http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Unknown target name: "higher quality".&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>computer</category><category>free software</category><category>information security</category><category>linux</category><category>python</category><guid>http://peakrisk.github.io/peakrisk/posts/free-software-and-computer-security.html</guid><pubDate>Mon, 22 Jun 2015 21:32:59 GMT</pubDate></item><item><title>More raspberry pi</title><link>http://peakrisk.github.io/peakrisk/posts/more-raspberry-pi.html</link><dc:creator>John Gill</dc:creator><description>&lt;div&gt;&lt;p&gt;I am going to be doing an introduction to free software and linux for
this year's &lt;a class="reference external" href="http://tlf.bm/"&gt;Technology Leadership Forum&lt;/a&gt; students.&lt;/p&gt;
&lt;p&gt;The plan is to have the students use raspberry pi's to learn about the
linux platform.&lt;/p&gt;
&lt;p&gt;I have a bunch of the new raspberry pi 2's and have been experimenting
with different linux distributions on these pi's.&lt;/p&gt;
&lt;p&gt;I was going to write up my experiences, but Swapnil Bhartiya has
kindly &lt;a class="reference external" href="http://www.linux.com/learn/tutorials/818062-getting-started-with-raspberry-pi-2-install-arch-linux"&gt;blogged&lt;/a&gt; about his own experiences with Arch, Raspbian and
Ubuntu Snappy Core.  His conclusions were similar to my own.&lt;/p&gt;
&lt;div class="section" id="arch"&gt;
&lt;h2&gt;Arch&lt;/h2&gt;
&lt;p&gt;I have been using &lt;a class="reference external" href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; a little of late and like many things
about Arch and &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;The Arch Way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, the Arch wiki has excellent documentation.  This is
critical to its success, since it does many things a little
differently to the larger linux distributions.&lt;/p&gt;
&lt;p&gt;An initial Arch install will not install much beyond the bare
essentials to get you up and running.  This does mean it can take a
little while to get a new system just how you want it, but has the
advantage you do not end up with hundreds of packages installed which
you have little idea what they do.  For the security conscious this is
a definite plus.&lt;/p&gt;
&lt;p&gt;One feature I love is that their are no &lt;em&gt;dev&lt;/em&gt; packages.  Anyone who
has tried using any of the main linux distributions and is in the
habit of compiling code on those systems will have run into the
situation where code fails to build due to missing C header files.&lt;/p&gt;
&lt;p&gt;In the major distributions these header files are in separate &lt;em&gt;dev&lt;/em&gt;
packages.  The philosophy is that most people are not compiling code
on these machines so do not need the header files.  This choice is
fine until a new user decides to try compiling some code and then is
hit by the missing header file issue.  Just another obstacle put in
the way of potential new developers.&lt;/p&gt;
&lt;p&gt;In contrast, Arch argues that these header files are generally tiny
and including them in the main package adds little overhead and saves
a lot of time for anyone doing development.   It would be good if more
distros made this switch.&lt;/p&gt;
&lt;p&gt;Using Arch will present some challenges to a new user, but given the
excellent state of the documentation it is also an excellent way to
gain a thorough understanding of how everything works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbian"&gt;
&lt;h2&gt;Raspbian&lt;/h2&gt;
&lt;p&gt;Raspbian appears to be the most widely used distribution on the
raspberry pi.   It is based on the Debian and has over 35,000 packages
available.&lt;/p&gt;
&lt;p&gt;Since I have mostly used Debian based distributions this seems a good
place to start.&lt;/p&gt;
&lt;p&gt;Trying different distros can get a little time consuming, between
downloading images and copying them onto SD cards.  Further, different
images are needed for the older pi's and the pi 2.&lt;/p&gt;
&lt;p&gt;The simplest way to get a Raspian system up and running is to
&lt;a class="reference external" href="https://www.raspberrypi.org/downloads/"&gt;download&lt;/a&gt; the raspian image from raspberrypi.org.&lt;/p&gt;
&lt;p&gt;To install just copy to the SD card device using dd:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dd if=raspian_image_you_downloaded.img of=/dev/SDCARD
&lt;/pre&gt;
&lt;p&gt;Finding the device for your SD card can be tricky. &lt;em&gt;lsblk&lt;/em&gt; shows you
all the block devices and with luck your SD card will be there.&lt;/p&gt;
&lt;p&gt;On my Ubuntu system it is /dev/mmblk0, on an Arch machine it showed up
as /dev/sdb.  You can usually figure things out using the SIZE of the
device.&lt;/p&gt;
&lt;p&gt;Note also that you want the block with TYPE disk, not any of the
partitions it might have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbain-installer"&gt;
&lt;h2&gt;Raspbain installer&lt;/h2&gt;
&lt;p&gt;Another approach is to use this &lt;a class="reference external" href="https://github.com/debian-pi/raspbian-ua-netinst"&gt;Raspbian installer&lt;/a&gt;.   One clear
advantage is that it is a small download, a mere 11MB and a small copy
onto your SD card.&lt;/p&gt;
&lt;p&gt;You then just plug it into the pi, turn on the pi with a wired network
connection and the install happens by magic.  It takes 20 minutes or
so, with a reasonable internet connection.&lt;/p&gt;
&lt;p&gt;Other advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you use the same installer for the original pi's and the pi 2.&lt;/li&gt;
&lt;li&gt;the installer installs the latest packages from the release
(currently wheezy) that you choose.&lt;/li&gt;
&lt;li&gt;you can customise the installer to include additional packages and a
number of other customisations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The down side is that the base install comes without a GUI
environment.  Depending on what you intend to do with the pi this may
not be a problem.&lt;/p&gt;
&lt;p&gt;I am going to experiment with customising the installer to see if I
can get it to install lxde, emacs, git and some other goodies I like
to have around on my systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;I cloned the git repository for the rasbian net installer:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone git@github.com:debian-pi/raspbian-ua-netinst.git
&lt;/pre&gt;
&lt;p&gt;I then added an &lt;em&gt;installer-config.txt&lt;/em&gt; to specify some extra packages
to install.&lt;/p&gt;
&lt;p&gt;I then followed the instructions in &lt;em&gt;BUILD.md&lt;/em&gt; to rebuild the image
and installed from there.&lt;/p&gt;
&lt;p&gt;This did not go as well as I had hoped, since although the extra
packages got installed their dependencies did not, at least that is
what I think happened.&lt;/p&gt;
&lt;p&gt;It also took me a couple of goes, &lt;em&gt;installer-config.txt&lt;/em&gt; needs to be
given execute permission, eg:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
chmod 77f installer-config.txt
&lt;/pre&gt;
&lt;p&gt;to make this work.&lt;/p&gt;
&lt;p&gt;I decided to try using &lt;em&gt;post-install.txt&lt;/em&gt; instead.  By the time this
runs the install is pretty much complete.&lt;/p&gt;
&lt;p&gt;My first attempt with this was just to add the following apt-get call:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install -y git emacs aptitude xserver-xorg-video-fbdev lxde curl htop nmap
&lt;/pre&gt;
&lt;p&gt;But this failed to do anything.  Time to track down the actuall
install script and see how what is going on.&lt;/p&gt;
&lt;p&gt;The actual install script is in &lt;em&gt;scripts/etc/init.d/rcS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now I understand.  The installer basically boots a minimal linux
kernel and then uses a single &lt;em&gt;init&lt;/em&gt; script, run during the boot to do
the install.&lt;/p&gt;
&lt;p&gt;Reading that script it becomes clear what I need to do.  The new
operating system is actually mounted on /rootfs and I need to use the
&lt;em&gt;chroot&lt;/em&gt; command to make sure apt-get runs with that as the root
filesystem.   So I ended up with &lt;em&gt;post-install.txt&lt;/em&gt; looking like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/bash

# install some extra goodies.  Do it here rather than in packages to
# pull in dependencies

chroot /rootfs /usr/bin/apt-get install -y \
   git emacs aptitude xserver-xorg-video-fbdev lxde curl htop nmap
&lt;/pre&gt;
&lt;p&gt;Bingo! It works, modulo having to hit enter three times to say OK to
some dialogs that the &lt;em&gt;lxde&lt;/em&gt; desktop environment displays.&lt;/p&gt;
&lt;p&gt;One other trick I used in all this was mounting the SD card's first
partition after copying the installer onto it.  This allows me to copy
over a new &lt;em&gt;installer-config.txt&lt;/em&gt; or &lt;em&gt;post-install.txt&lt;/em&gt; without having
to rebuild the full image.&lt;/p&gt;
&lt;p&gt;Overall, I am liking this installer.&lt;/p&gt;
&lt;!-- title: links --&gt;
&lt;!-- slug: references --&gt;
&lt;!-- date: 2015-06-10 14:08:31 UTC --&gt;
&lt;!-- tags: draft --&gt;
&lt;!-- link: --&gt;
&lt;!-- description: links to include in all posts --&gt;
&lt;!-- type: text --&gt;
&lt;!-- Generated with: grep -h '^\.\. _' *.rst | sort | uniq &gt; references.rst --&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry pi</category><guid>http://peakrisk.github.io/peakrisk/posts/more-raspberry-pi.html</guid><pubDate>Wed, 10 Jun 2015 18:38:29 GMT</pubDate></item></channel></rss>